- name: get state of existing volumes
  shell: |
    virsh vol-list vino-default
  register: vol_list

- name: DEBUG domain.interfaces
  debug:
    var: domain.interfaces


- name: DEBUG domain
  debug:
    var: domain

- name: write out domain volume request xml
  copy:
    content: "{{ flavorTemplates[domain.role]['volumeTemplate'] }}"
    dest: /tmp/vol-{{ domain.name }}.xml

- name: create domain volume if it doesn't exist
  shell: |
    virsh vol-create vino-default /tmp/vol-{{ domain.name }}.xml
  when: "domain.name |string not in vol_list.stdout"

- name: ensure vino instance state directory exists
  file:
    path: /var/lib/libvirt/vino-instances
    state: directory
    recurse: yes
    owner: root
    group: root

# the virt community plugin does not handle pushing out updates
# to domains, so we must shell out here instead

- name: write out domain xml
  copy: content="{{ flavorTemplates[domain.role]['domainTemplate'] }}" dest=/tmp/{{ domain.name }}.xml

- name: virsh define domain
  shell: |
    virsh define /tmp/{{ domain.name }}.xml

#- name: set vm to running
#  virt:
#    name: "{{ node.name + '-' + item|string}}"
#    state: running
#    autostart: yes
#  loop: "{{ range(0,node.count)|list }}"
#  ignore_errors: true
